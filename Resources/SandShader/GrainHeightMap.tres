[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://l558jrcg47g5"]

[ext_resource type="Script" path="res://addons/shaderV/uv/scaleUV.gd" id="2_mo01h"]
[ext_resource type="Script" path="res://addons/shaderV/uv/rotate.gd" id="3_umnje"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley3d.gd" id="7_l1o8s"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_lwh24"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_6d710"]
parameter_name = "GrainPeriod"
default_value_enabled = true
default_value = 143.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_c0dli"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_opcwi"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 5.0, 3, 1.0, 4, 0.0]
initialized = true
script = ExtResource("7_l1o8s")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_ueo7c"]
default_input_values = [1, Vector3(1, 1, 0), 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("2_mo01h")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_6ehy2"]
default_input_values = [1, 0.0, 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("3_umnje")

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_02nm6"]
parameter_name = "SineRotation"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_n5lht"]
parameter_name = "UVScale"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_h5xd7"]
output_port_for_preview = 0
input_name = "color"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float UVScale = 1;
uniform float SineRotation = 0;
uniform float GrainPeriod = 143;


// ScaleUV
vec2 _scaleUV(vec2 _scale_uv, vec2 _scale_vect, vec2 _pivot_vect) {
	return (_scale_uv - _pivot_vect) * _scale_vect + _pivot_vect;
}
// RotateUV
vec3 _rotateUV(vec3 _rotate_uv, vec2 _rotate_pivot_vect, float _rotate_radians){
	//_r0tation_r0tate = radians(_r0tationDeg_r0tate);
	vec2 _rotation_angle = vec2(cos(_rotate_radians), sin(_rotate_radians));
	_rotate_uv.xy -= _rotate_pivot_vect;
	_rotate_uv.xy = vec2((_rotate_uv.x*_rotation_angle.x-_rotate_uv.y*_rotation_angle.y), 
						 (_rotate_uv.x*_rotation_angle.y+_rotate_uv.y*_rotation_angle.x));
	_rotate_uv.xy += _rotate_pivot_vect;
	return _rotate_uv;
}
// WorleyNoise3D
vec2 _cellular3dNoiseFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}

void fragment() {
// Input:2
	vec2 n_out2p0 = UV;


// FloatParameter:44
	float n_out44p0 = UVScale;


	vec3 n_out41p0;
// ScaleUV:41
	vec3 n_in41p2 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out41p0.xy = _scaleUV(vec3(n_out2p0, 0.0).xy, vec3(n_out44p0).xy, n_in41p2.xy);
	}


// FloatParameter:43
	float n_out43p0 = SineRotation;


	vec3 n_out42p0;
// RotateUV:42
	vec3 n_in42p2 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out42p0 = _rotateUV(n_out41p0, n_in42p2.xy, n_out43p0);
	}


// FloatParameter:38
	float n_out38p0 = GrainPeriod;


// VectorOp:39
	vec2 n_out39p0 = vec2(n_out42p0.xy) * vec2(n_out38p0);


	float n_out40p0;
	float n_out40p1;
// WorleyNoise3D:40
	float n_in40p2 = 5.00000;
	float n_in40p3 = 1.00000;
	float n_in40p4 = 0.00000;
	{
		vec2 n_out40p0n_out40p1 = _cellular3dNoiseFunc(vec3((vec3(n_out39p0, 0.0).xy+vec3(n_out38p0).xy)*n_in40p2, n_in40p4), min(max(n_in40p3, 0.0), 1.0));
		n_out40p0 = n_out40p0n_out40p1.x;
		n_out40p1 = n_out40p0n_out40p1.y;
	}


// Output:0
	COLOR.rgb = vec3(n_out40p0);


}
"
graph_offset = Vector2(-209.449, -97.1581)
mode = 1
flags/light_only = false
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_h5xd7")
nodes/vertex/2/position = Vector2(-100, 140)
nodes/fragment/0/position = Vector2(1760, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_lwh24")
nodes/fragment/2/position = Vector2(-240, 80)
nodes/fragment/38/node = SubResource("VisualShaderNodeFloatParameter_6d710")
nodes/fragment/38/position = Vector2(780, 300)
nodes/fragment/39/node = SubResource("VisualShaderNodeVectorOp_c0dli")
nodes/fragment/39/position = Vector2(1020, 100)
nodes/fragment/40/node = SubResource("VisualShaderNodeCustom_opcwi")
nodes/fragment/40/position = Vector2(1400, 160)
nodes/fragment/41/node = SubResource("VisualShaderNodeCustom_ueo7c")
nodes/fragment/41/position = Vector2(200, 40)
nodes/fragment/42/node = SubResource("VisualShaderNodeCustom_6ehy2")
nodes/fragment/42/position = Vector2(440, 40)
nodes/fragment/43/node = SubResource("VisualShaderNodeFloatParameter_02nm6")
nodes/fragment/43/position = Vector2(120, 240)
nodes/fragment/44/node = SubResource("VisualShaderNodeFloatParameter_n5lht")
nodes/fragment/44/position = Vector2(-220, 220)
nodes/fragment/connections = PackedInt32Array(38, 0, 39, 1, 39, 0, 40, 0, 38, 0, 40, 1, 40, 0, 0, 0, 44, 0, 41, 1, 41, 0, 42, 0, 43, 0, 42, 1, 42, 0, 39, 0, 2, 0, 41, 0)
