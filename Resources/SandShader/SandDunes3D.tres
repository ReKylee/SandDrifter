[gd_resource type="VisualShader" load_steps=23 format=3 uid="uid://d2l1mp5nyylom"]

[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex3d.gd" id="1_ddr7f"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2d.gd" id="1_tem0n"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_0lafb"]
input_name = "color"

[sub_resource type="VisualShaderNodeFresnel" id="VisualShaderNodeFresnel_rvxy5"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_mf3t3"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 5.0, 3, 0.0]
initialized = true
script = ExtResource("1_ddr7f")

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_agpew"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.1, 0.1, 0.1)]
op_type = 3

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_i7411"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_rk3se"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_ke3ns"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 500.0, 3, 1.0]
initialized = true
script = ExtResource("1_tem0n")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_mi06c"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_y4amx"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 0.05, 1)]
operator = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_vye6i"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 5.0, 3, 0.0]
initialized = true
script = ExtResource("1_ddr7f")

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_7iu08"]
operator = 4

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_j5j8g"]
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_01b61"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1)]
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_dgoul"]
parameter_name = "Height_Detail"
default_value_enabled = true
default_value = 0.1

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_0l1et"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_42xks"]
operator = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2wixo"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 5.0, 3, 1.0]
initialized = true
script = ExtResource("1_tem0n")

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_2tht1"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_lek7y"]
parameter_name = "Height_Dune"
default_value_enabled = true
default_value = 2.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_xfms3"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform float Height_Dune = 2;
uniform float Height_Detail = 0.10000000149012;


// SimplexNoise3D
vec4 _permute_simplex3_noise(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _simplex3dNoiseFunc(vec3 v) { 
	vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
	vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
	
	vec3 i  = floor(v + dot(v, vec3(C.y)));
	vec3 x0 = v - i + dot(i, vec3(C.x)) ;
	
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );
	
	vec3 x1 = x0 - i1 + vec3(C.x);
	vec3 x2 = x0 - i2 + vec3(C.y);
	vec3 x3 = x0 - D.yyy;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec4 p = _permute_simplex3_noise(_permute_simplex3_noise(_permute_simplex3_noise(
	 		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+   i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+   i.x + vec4(0.0, i1.x, i2.x, 1.0));
	
	float n_ = 0.142857142857;
	vec3  ns = n_ * D.wyz - D.xzx;
	
	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
	
	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );
	
	vec4 x = x_ *ns.x + vec4(ns.y);
	vec4 y = y_ *ns.x + vec4(ns.y);
	vec4 h = 1.0 - abs(x) - abs(y);
	
	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );
	
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));
	
	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);
	
	vec4 norm = 2.79284291400159 - 0.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
	m = m * m;
	return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}
// WorleyNoise2D
vec2 _cellular2dNoiseFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}

void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;


// Input:17
	vec2 n_out17p0 = UV;


// VectorOp:18
	vec2 n_in18p1 = vec2(0.00000, 0.00000);
	vec2 n_out18p0 = n_out17p0 + n_in18p1;


	float n_out15p0;
// SimplexNoise3D:15
	vec3 n_in15p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in15p2 = 5.00000;
	float n_in15p3 = 0.00000;
	{
		n_out15p0 = _simplex3dNoiseFunc(vec3((UV.xy + n_in15p1.xy) * n_in15p2, n_in15p3));
	}


// Mix:16
	vec3 n_in16p2 = vec3(0.10000, 0.10000, 0.10000);
	vec3 n_out16p0 = mix(vec3(n_out18p0, 0.0), vec3(n_out15p0), n_in16p2);


	float n_out6p0;
	float n_out6p1;
// WorleyNoise2D:6
	vec3 n_in6p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in6p2 = 5.00000;
	float n_in6p3 = 1.00000;
	{
		vec2 n_out6p0n_out6p1 = _cellular2dNoiseFunc((n_out16p0.xy+n_in6p1.xy)*n_in6p2, min(max(n_in6p3, 0.0), 1.0));
		n_out6p0 = n_out6p0n_out6p1.x;
		n_out6p1 = n_out6p0n_out6p1.y;
	}


// FloatParameter:8
	float n_out8p0 = Height_Dune;


// FloatOp:5
	float n_out5p0 = n_out6p0 * n_out8p0;


	float n_out23p0;
// SimplexNoise3D:23
	vec3 n_in23p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in23p2 = 5.00000;
	float n_in23p3 = 0.00000;
	{
		n_out23p0 = _simplex3dNoiseFunc(vec3((n_out16p0.xy + n_in23p1.xy) * n_in23p2, n_in23p3));
	}


// VectorOp:21
	vec3 n_in21p1 = vec3(1.00000, 0.05000, 1.00000);
	vec3 n_out21p0 = n_out16p0 * n_in21p1;


	float n_out19p0;
	float n_out19p1;
// WorleyNoise2D:19
	vec3 n_in19p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in19p2 = 500.00000;
	float n_in19p3 = 1.00000;
	{
		vec2 n_out19p0n_out19p1 = _cellular2dNoiseFunc((n_out21p0.xy+n_in19p1.xy)*n_in19p2, min(max(n_in19p3, 0.0), 1.0));
		n_out19p0 = n_out19p0n_out19p1.x;
		n_out19p1 = n_out19p0n_out19p1.y;
	}


	vec3 n_out24p0;
// ColorOp:24
	{
		float base = vec3(n_out23p0).x;
		float blend = vec3(n_out19p0).x;
		if (base < 0.5) {
			n_out24p0.x = 2.0 * base * blend;
		} else {
			n_out24p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out23p0).y;
		float blend = vec3(n_out19p0).y;
		if (base < 0.5) {
			n_out24p0.y = 2.0 * base * blend;
		} else {
			n_out24p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out23p0).z;
		float blend = vec3(n_out19p0).z;
		if (base < 0.5) {
			n_out24p0.z = 2.0 * base * blend;
		} else {
			n_out24p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}


// FloatParameter:27
	float n_out27p0 = Height_Detail;


// VectorOp:26
	vec3 n_out26p0 = n_out24p0 * vec3(n_out27p0);


	vec3 n_out25p0;
// ColorOp:25
	{
		float base = vec3(n_out5p0).x;
		float blend = n_out26p0.x;
		if (base < 0.5) {
			n_out25p0.x = 2.0 * base * blend;
		} else {
			n_out25p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out5p0).y;
		float blend = n_out26p0.y;
		if (base < 0.5) {
			n_out25p0.y = 2.0 * base * blend;
		} else {
			n_out25p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out5p0).z;
		float blend = n_out26p0.z;
		if (base < 0.5) {
			n_out25p0.z = 2.0 * base * blend;
		} else {
			n_out25p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}


// VectorCompose:7
	float n_in7p0 = 0.00000;
	float n_in7p2 = 0.00000;
	vec3 n_out7p0 = vec3(n_in7p0, n_out25p0.x, n_in7p2);


// VectorOp:9
	vec3 n_out9p0 = n_out2p0 + n_out7p0;


// VectorFunc:28
	vec3 n_in28p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out28p0 = normalize(n_in28p0);


// Output:0
	VERTEX = n_out9p0;
	NORMAL = n_out28p0;
	COLOR.rgb = n_out25p0;


}

void fragment() {
// Fresnel:3
	float n_in3p3 = 1.00000;
	float n_out3p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in3p3);


// Output:0
	ALBEDO = vec3(n_out3p0);


}
"
graph_offset = Vector2(3536.9, 50.5632)
nodes/vertex/0/position = Vector2(720, 140)
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_mi06c")
nodes/vertex/2/position = Vector2(-180, 80)
nodes/vertex/5/node = SubResource("VisualShaderNodeFloatOp_42xks")
nodes/vertex/5/position = Vector2(-500, 300)
nodes/vertex/6/node = SubResource("VisualShaderNodeCustom_2wixo")
nodes/vertex/6/position = Vector2(-1280, 100)
nodes/vertex/7/node = SubResource("VisualShaderNodeVectorCompose_2tht1")
nodes/vertex/7/position = Vector2(-100, 240)
nodes/vertex/8/node = SubResource("VisualShaderNodeFloatParameter_lek7y")
nodes/vertex/8/position = Vector2(-860, 380)
nodes/vertex/9/node = SubResource("VisualShaderNodeVectorOp_xfms3")
nodes/vertex/9/position = Vector2(200, 40)
nodes/vertex/15/node = SubResource("VisualShaderNodeCustom_mf3t3")
nodes/vertex/15/position = Vector2(-2180, 380)
nodes/vertex/16/node = SubResource("VisualShaderNodeMix_agpew")
nodes/vertex/16/position = Vector2(-1860, 180)
nodes/vertex/17/node = SubResource("VisualShaderNodeInput_i7411")
nodes/vertex/17/position = Vector2(-2380, 140)
nodes/vertex/18/node = SubResource("VisualShaderNodeVectorOp_rk3se")
nodes/vertex/18/position = Vector2(-2060, 80)
nodes/vertex/19/node = SubResource("VisualShaderNodeCustom_ke3ns")
nodes/vertex/19/position = Vector2(-1380, 480)
nodes/vertex/21/node = SubResource("VisualShaderNodeVectorOp_y4amx")
nodes/vertex/21/position = Vector2(-1560, 260)
nodes/vertex/23/node = SubResource("VisualShaderNodeCustom_vye6i")
nodes/vertex/23/position = Vector2(-1420, 840)
nodes/vertex/24/node = SubResource("VisualShaderNodeColorOp_7iu08")
nodes/vertex/24/position = Vector2(-860, 740)
nodes/vertex/25/node = SubResource("VisualShaderNodeColorOp_j5j8g")
nodes/vertex/25/position = Vector2(-260, 560)
nodes/vertex/26/node = SubResource("VisualShaderNodeVectorOp_01b61")
nodes/vertex/26/position = Vector2(-580, 640)
nodes/vertex/27/node = SubResource("VisualShaderNodeFloatParameter_dgoul")
nodes/vertex/27/position = Vector2(-860, 880)
nodes/vertex/28/node = SubResource("VisualShaderNodeVectorFunc_0l1et")
nodes/vertex/28/position = Vector2(280, 700)
nodes/vertex/connections = PackedInt32Array(8, 0, 5, 1, 2, 0, 9, 0, 7, 0, 9, 1, 9, 0, 0, 0, 15, 0, 16, 1, 16, 0, 6, 0, 17, 0, 18, 0, 18, 0, 16, 0, 16, 0, 21, 0, 21, 0, 19, 0, 16, 0, 23, 0, 23, 0, 24, 0, 19, 0, 24, 1, 6, 0, 5, 0, 24, 0, 26, 0, 26, 0, 25, 1, 5, 0, 25, 0, 25, 0, 7, 1, 27, 0, 26, 1, 25, 0, 0, 6, 28, 0, 0, 1)
nodes/fragment/0/position = Vector2(5340, 220)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_0lafb")
nodes/fragment/2/position = Vector2(4660, 260)
nodes/fragment/3/node = SubResource("VisualShaderNodeFresnel_rvxy5")
nodes/fragment/3/position = Vector2(4700, 420)
nodes/fragment/connections = PackedInt32Array(3, 0, 0, 0)
